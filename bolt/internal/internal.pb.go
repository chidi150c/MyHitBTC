// Code generated by protoc-gen-go. DO NOT EDIT.
// source: internal.proto

package internal

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AppData struct {
	ID                     uint64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	UsrID                  uint64    `protobuf:"varint,2,opt,name=UsrID,proto3" json:"UsrID,omitempty"`
	SessID                 string    `protobuf:"bytes,3,opt,name=SessID,proto3" json:"SessID,omitempty"`
	PublicKey              string    `protobuf:"bytes,4,opt,name=PublicKey,proto3" json:"PublicKey,omitempty"`
	Secret                 string    `protobuf:"bytes,5,opt,name=Secret,proto3" json:"Secret,omitempty"`
	Host                   string    `protobuf:"bytes,6,opt,name=Host,proto3" json:"Host,omitempty"`
	SymbolCode             string    `protobuf:"bytes,7,opt,name=SymbolCode,proto3" json:"SymbolCode,omitempty"`
	Side                   string    `protobuf:"bytes,8,opt,name=Side,proto3" json:"Side,omitempty"`
	DisableTransaction     string    `protobuf:"bytes,9,opt,name=DisableTransaction,proto3" json:"DisableTransaction,omitempty"`
	MessageFilter          string    `protobuf:"bytes,10,opt,name=MessageFilter,proto3" json:"MessageFilter,omitempty"`
	MrktQuantity           float64   `protobuf:"fixed64,11,opt,name=MrktQuantity,proto3" json:"MrktQuantity,omitempty"`
	MrktBuyPrice           float64   `protobuf:"fixed64,12,opt,name=MrktUpPrice,proto3" json:"MrktUpPrice,omitempty"`
	MrktSellPrice          float64   `protobuf:"fixed64,13,opt,name=MrktDownPrice,proto3" json:"MrktDownPrice,omitempty"`
	NeverBought            string    `protobuf:"bytes,14,opt,name=NeverBought,proto3" json:"NeverBought,omitempty"`
	NeverSold              string    `protobuf:"bytes,15,opt,name=NeverSold,proto3" json:"NeverSold,omitempty"`
	QuantityIncrement      float64   `protobuf:"fixed64,16,opt,name=QuantityIncrement,proto3" json:"QuantityIncrement,omitempty"`
	Message                string    `protobuf:"bytes,17,opt,name=Message,proto3" json:"Message,omitempty"`
	TickSize               float64   `protobuf:"fixed64,18,opt,name=TickSize,proto3" json:"TickSize,omitempty"`
	TakeLiquidityRate      float64   `protobuf:"fixed64,19,opt,name=TakeLiquidityRate,proto3" json:"TakeLiquidityRate,omitempty"`
	HeartbeatBuy           string    `protobuf:"bytes,20,opt,name=HeartbeatBuy,proto3" json:"HeartbeatBuy,omitempty"`
	HeartbeatSell          string    `protobuf:"bytes,21,opt,name=HeartbeatSell,proto3" json:"HeartbeatSell,omitempty"`
	SuccessfulOrders       float64   `protobuf:"fixed64,22,opt,name=SuccessfulOrders,proto3" json:"SuccessfulOrders,omitempty"`
	MadeProfitOrders       float64   `protobuf:"fixed64,23,opt,name=MadeProfitOrders,proto3" json:"MadeProfitOrders,omitempty"`
	MadeLostOrders         float64   `protobuf:"fixed64,24,opt,name=MadeLostOrders,proto3" json:"MadeLostOrders,omitempty"`
	StopLostPoint          float64   `protobuf:"fixed64,25,opt,name=StopLostPoint,proto3" json:"StopLostPoint,omitempty"`
	BaseCurrency           string    `protobuf:"bytes,26,opt,name=BaseCurrency,proto3" json:"BaseCurrency,omitempty"`
	QuoteCurrency          string    `protobuf:"bytes,27,opt,name=QuoteCurrency,proto3" json:"QuoteCurrency,omitempty"`
	TrailPoints            float64   `protobuf:"fixed64,28,opt,name=TrailPoints,proto3" json:"TrailPoints,omitempty"`
	LeastProfitMargin      float64   `protobuf:"fixed64,29,opt,name=LeastProfitMargin,proto3" json:"LeastProfitMargin,omitempty"`
	SpinOutReason          string    `protobuf:"bytes,30,opt,name=SpinOutReason,proto3" json:"SpinOutReason,omitempty"`
	SureTradeFactor        float64   `protobuf:"fixed64,31,opt,name=SureTradeFactor,proto3" json:"SureTradeFactor,omitempty"`
	Hodler                 string    `protobuf:"bytes,32,opt,name=Hodler,proto3" json:"Hodler,omitempty"`
	GoodBiz                float64   `protobuf:"fixed64,33,opt,name=GoodBiz,proto3" json:"GoodBiz,omitempty"`
	AlternateData          float64   `protobuf:"fixed64,34,opt,name=AlternateData,proto3" json:"AlternateData,omitempty"`
	InstantProfit          float64   `protobuf:"fixed64,35,opt,name=InstantProfit,proto3" json:"InstantProfit,omitempty"`
	InstantLost            float64   `protobuf:"fixed64,36,opt,name=InstantLost,proto3" json:"InstantLost,omitempty"`
	TotalProfit            float64   `protobuf:"fixed64,37,opt,name=TotalProfit,proto3" json:"TotalProfit,omitempty"`
	TotalLost              float64   `protobuf:"fixed64,38,opt,name=TotalLost,proto3" json:"TotalLost,omitempty"`
	PriceTradingStarted    string    `protobuf:"bytes,39,opt,name=PriceTradingStarted,proto3" json:"PriceTradingStarted,omitempty"`
	NextMarketBuyPoint     float64   `protobuf:"fixed64,40,opt,name=NextMarketBuyPoint,proto3" json:"NextMarketBuyPoint,omitempty"`
	NextMarketSellPoint    float64   `protobuf:"fixed64,41,opt,name=NextMarketSellPoint,proto3" json:"NextMarketSellPoint,omitempty"`
	MainStartPointSell     float64   `protobuf:"fixed64,42,opt,name=MainStartPointSell,proto3" json:"MainStartPointSell,omitempty"`
	SoldQuantity           float64   `protobuf:"fixed64,43,opt,name=SoldQuantity,proto3" json:"SoldQuantity,omitempty"`
	BoughtQuantity         float64   `protobuf:"fixed64,44,opt,name=BoughtQuantity,proto3" json:"BoughtQuantity,omitempty"`
	MainStartPointBuy      float64   `protobuf:"fixed64,45,opt,name=MainStartPointBuy,proto3" json:"MainStartPointBuy,omitempty"`
	MainQuantity           float64   `protobuf:"fixed64,46,opt,name=MainQuantity,proto3" json:"MainQuantity,omitempty"`
	NextStartPointNegPrice float64   `protobuf:"fixed64,47,opt,name=NextStartPointNegPrice,proto3" json:"NextStartPointNegPrice,omitempty"`
	NextStartPointPrice    float64   `protobuf:"fixed64,48,opt,name=NextStartPointPrice,proto3" json:"NextStartPointPrice,omitempty"`
	ProfitPointFactor      float64   `protobuf:"fixed64,49,opt,name=ProfitPointFactor,proto3" json:"ProfitPointFactor,omitempty"`
	HodlerQuantity         float64   `protobuf:"fixed64,50,opt,name=HodlerQuantity,proto3" json:"HodlerQuantity,omitempty"`
	ProfitPriceUsed        string    `protobuf:"bytes,51,opt,name=ProfitPriceUsed,proto3" json:"ProfitPriceUsed,omitempty"`
	ProfitPrice            float64   `protobuf:"fixed64,52,opt,name=ProfitPrice,proto3" json:"ProfitPrice,omitempty"`
	PendingA               []float64 `protobuf:"fixed64,53,rep,packed,name=PendingA,proto3" json:"PendingA,omitempty"`
	PendingB               []float64 `protobuf:"fixed64,54,rep,packed,name=PendingB,proto3" json:"PendingB,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}  `json:"-"`
	XXX_unrecognized       []byte    `json:"-"`
	XXX_sizecache          int32     `json:"-"`
}

func (m *AppData) Reset()         { *m = AppData{} }
func (m *AppData) String() string { return proto.CompactTextString(m) }
func (*AppData) ProtoMessage()    {}
func (*AppData) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{0}
}

func (m *AppData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppData.Unmarshal(m, b)
}
func (m *AppData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppData.Marshal(b, m, deterministic)
}
func (m *AppData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppData.Merge(m, src)
}
func (m *AppData) XXX_Size() int {
	return xxx_messageInfo_AppData.Size(m)
}
func (m *AppData) XXX_DiscardUnknown() {
	xxx_messageInfo_AppData.DiscardUnknown(m)
}

var xxx_messageInfo_AppData proto.InternalMessageInfo

func (m *AppData) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *AppData) GetUsrID() uint64 {
	if m != nil {
		return m.UsrID
	}
	return 0
}

func (m *AppData) GetSessID() string {
	if m != nil {
		return m.SessID
	}
	return ""
}

func (m *AppData) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *AppData) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *AppData) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *AppData) GetSymbolCode() string {
	if m != nil {
		return m.SymbolCode
	}
	return ""
}

func (m *AppData) GetSide() string {
	if m != nil {
		return m.Side
	}
	return ""
}

func (m *AppData) GetDisableTransaction() string {
	if m != nil {
		return m.DisableTransaction
	}
	return ""
}

func (m *AppData) GetMessageFilter() string {
	if m != nil {
		return m.MessageFilter
	}
	return ""
}

func (m *AppData) GetMrktQuantity() float64 {
	if m != nil {
		return m.MrktQuantity
	}
	return 0
}

func (m *AppData) GetMrktBuyPrice() float64 {
	if m != nil {
		return m.MrktBuyPrice
	}
	return 0
}

func (m *AppData) GetMrktSellPrice() float64 {
	if m != nil {
		return m.MrktSellPrice
	}
	return 0
}

func (m *AppData) GetNeverBought() string {
	if m != nil {
		return m.NeverBought
	}
	return ""
}

func (m *AppData) GetNeverSold() string {
	if m != nil {
		return m.NeverSold
	}
	return ""
}

func (m *AppData) GetQuantityIncrement() float64 {
	if m != nil {
		return m.QuantityIncrement
	}
	return 0
}

func (m *AppData) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *AppData) GetTickSize() float64 {
	if m != nil {
		return m.TickSize
	}
	return 0
}

func (m *AppData) GetTakeLiquidityRate() float64 {
	if m != nil {
		return m.TakeLiquidityRate
	}
	return 0
}

func (m *AppData) GetHeartbeatBuy() string {
	if m != nil {
		return m.HeartbeatBuy
	}
	return ""
}

func (m *AppData) GetHeartbeatSell() string {
	if m != nil {
		return m.HeartbeatSell
	}
	return ""
}

func (m *AppData) GetSuccessfulOrders() float64 {
	if m != nil {
		return m.SuccessfulOrders
	}
	return 0
}

func (m *AppData) GetMadeProfitOrders() float64 {
	if m != nil {
		return m.MadeProfitOrders
	}
	return 0
}

func (m *AppData) GetMadeLostOrders() float64 {
	if m != nil {
		return m.MadeLostOrders
	}
	return 0
}

func (m *AppData) GetStopLostPoint() float64 {
	if m != nil {
		return m.StopLostPoint
	}
	return 0
}

func (m *AppData) GetBaseCurrency() string {
	if m != nil {
		return m.BaseCurrency
	}
	return ""
}

func (m *AppData) GetQuoteCurrency() string {
	if m != nil {
		return m.QuoteCurrency
	}
	return ""
}

func (m *AppData) GetTrailPoints() float64 {
	if m != nil {
		return m.TrailPoints
	}
	return 0
}

func (m *AppData) GetLeastProfitMargin() float64 {
	if m != nil {
		return m.LeastProfitMargin
	}
	return 0
}

func (m *AppData) GetSpinOutReason() string {
	if m != nil {
		return m.SpinOutReason
	}
	return ""
}

func (m *AppData) GetSureTradeFactor() float64 {
	if m != nil {
		return m.SureTradeFactor
	}
	return 0
}

func (m *AppData) GetHodler() string {
	if m != nil {
		return m.Hodler
	}
	return ""
}

func (m *AppData) GetGoodBiz() float64 {
	if m != nil {
		return m.GoodBiz
	}
	return 0
}

func (m *AppData) GetAlternateData() float64 {
	if m != nil {
		return m.AlternateData
	}
	return 0
}

func (m *AppData) GetInstantProfit() float64 {
	if m != nil {
		return m.InstantProfit
	}
	return 0
}

func (m *AppData) GetInstantLost() float64 {
	if m != nil {
		return m.InstantLost
	}
	return 0
}

func (m *AppData) GetTotalProfit() float64 {
	if m != nil {
		return m.TotalProfit
	}
	return 0
}

func (m *AppData) GetTotalLost() float64 {
	if m != nil {
		return m.TotalLost
	}
	return 0
}

func (m *AppData) GetPriceTradingStarted() string {
	if m != nil {
		return m.PriceTradingStarted
	}
	return ""
}

func (m *AppData) GetNextMarketBuyPoint() float64 {
	if m != nil {
		return m.NextMarketBuyPoint
	}
	return 0
}

func (m *AppData) GetNextMarketSellPoint() float64 {
	if m != nil {
		return m.NextMarketSellPoint
	}
	return 0
}

func (m *AppData) GetMainStartPointSell() float64 {
	if m != nil {
		return m.MainStartPointSell
	}
	return 0
}

func (m *AppData) GetSoldQuantity() float64 {
	if m != nil {
		return m.SoldQuantity
	}
	return 0
}

func (m *AppData) GetBoughtQuantity() float64 {
	if m != nil {
		return m.BoughtQuantity
	}
	return 0
}

func (m *AppData) GetMainStartPointBuy() float64 {
	if m != nil {
		return m.MainStartPointBuy
	}
	return 0
}

func (m *AppData) GetMainQuantity() float64 {
	if m != nil {
		return m.MainQuantity
	}
	return 0
}

func (m *AppData) GetNextStartPointNegPrice() float64 {
	if m != nil {
		return m.NextStartPointNegPrice
	}
	return 0
}

func (m *AppData) GetNextStartPointPrice() float64 {
	if m != nil {
		return m.NextStartPointPrice
	}
	return 0
}

func (m *AppData) GetProfitPointFactor() float64 {
	if m != nil {
		return m.ProfitPointFactor
	}
	return 0
}

func (m *AppData) GetHodlerQuantity() float64 {
	if m != nil {
		return m.HodlerQuantity
	}
	return 0
}

func (m *AppData) GetProfitPriceUsed() string {
	if m != nil {
		return m.ProfitPriceUsed
	}
	return ""
}

func (m *AppData) GetProfitPrice() float64 {
	if m != nil {
		return m.ProfitPrice
	}
	return 0
}

func (m *AppData) GetPendingA() []float64 {
	if m != nil {
		return m.PendingA
	}
	return nil
}

func (m *AppData) GetPendingB() []float64 {
	if m != nil {
		return m.PendingB
	}
	return nil
}

type User struct {
	ID                   uint64            `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	SessID               string            `protobuf:"bytes,2,opt,name=SessID,proto3" json:"SessID,omitempty"`
	ApIDs                map[string]uint64 `protobuf:"bytes,3,rep,name=ApIDs,proto3" json:"ApIDs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Username             string            `protobuf:"bytes,4,opt,name=Username,proto3" json:"Username,omitempty"`
	Password             string            `protobuf:"bytes,5,opt,name=Password,proto3" json:"Password,omitempty"`
	Firstname            string            `protobuf:"bytes,6,opt,name=Firstname,proto3" json:"Firstname,omitempty"`
	Lastname             string            `protobuf:"bytes,7,opt,name=Lastname,proto3" json:"Lastname,omitempty"`
	Email                string            `protobuf:"bytes,8,opt,name=Email,proto3" json:"Email,omitempty"`
	ImageURL             string            `protobuf:"bytes,9,opt,name=ImageURL,proto3" json:"ImageURL,omitempty"`
	Token                string            `protobuf:"bytes,10,opt,name=Token,proto3" json:"Token,omitempty"`
	Url                  string            `protobuf:"bytes,11,opt,name=Url,proto3" json:"Url,omitempty"`
	Expiry               int64             `protobuf:"varint,12,opt,name=Expiry,proto3" json:"Expiry,omitempty"`
	Host                 string            `protobuf:"bytes,13,opt,name=Host,proto3" json:"Host,omitempty"`
	Level                string            `protobuf:"bytes,14,opt,name=Level,proto3" json:"Level,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{1}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *User) GetSessID() string {
	if m != nil {
		return m.SessID
	}
	return ""
}

func (m *User) GetApIDs() map[string]uint64 {
	if m != nil {
		return m.ApIDs
	}
	return nil
}

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *User) GetFirstname() string {
	if m != nil {
		return m.Firstname
	}
	return ""
}

func (m *User) GetLastname() string {
	if m != nil {
		return m.Lastname
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetImageURL() string {
	if m != nil {
		return m.ImageURL
	}
	return ""
}

func (m *User) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *User) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *User) GetExpiry() int64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *User) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *User) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func init() {
	proto.RegisterType((*AppData)(nil), "internal.AppData")
	proto.RegisterType((*User)(nil), "internal.User")
	proto.RegisterMapType((map[string]uint64)(nil), "internal.User.ApIDsEntry")
}

func init() { proto.RegisterFile("internal.proto", fileDescriptor_41f4a519b878ee3b) }

var fileDescriptor_41f4a519b878ee3b = []byte{
	// 1039 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x56, 0xed, 0x56, 0x1b, 0x37,
	0x10, 0x3d, 0xc6, 0x10, 0x40, 0x84, 0x8f, 0x28, 0x94, 0x2a, 0x34, 0x4d, 0x5d, 0x9a, 0xa6, 0x6e,
	0x9a, 0x92, 0x34, 0x69, 0x73, 0x72, 0xfa, 0x0f, 0xc7, 0x50, 0x7c, 0x6a, 0x08, 0xf1, 0xe2, 0x07,
	0x10, 0xbb, 0x13, 0x57, 0xc7, 0x8b, 0xe4, 0x4a, 0x5a, 0x12, 0xe7, 0x85, 0xfa, 0x0c, 0x7d, 0xbb,
	0x9e, 0x19, 0xad, 0xf7, 0xc3, 0xa6, 0xff, 0xf6, 0xde, 0x3b, 0xa3, 0x91, 0x66, 0x47, 0x33, 0x62,
	0x5b, 0x4a, 0x7b, 0xb0, 0x5a, 0xa6, 0x87, 0x13, 0x6b, 0xbc, 0xe1, 0x6b, 0x33, 0x7c, 0xf0, 0xef,
	0x36, 0x5b, 0x3d, 0x9a, 0x4c, 0xba, 0xd2, 0x4b, 0xbe, 0xc5, 0x96, 0x7a, 0x5d, 0xd1, 0x68, 0x35,
	0xda, 0xcb, 0x83, 0xa5, 0x5e, 0x97, 0xef, 0xb2, 0x95, 0xa1, 0xb3, 0xbd, 0xae, 0x58, 0x22, 0x2a,
	0x00, 0xbe, 0xc7, 0xee, 0x44, 0xe0, 0x5c, 0xaf, 0x2b, 0x9a, 0xad, 0x46, 0x7b, 0x7d, 0x90, 0x23,
	0xfe, 0x90, 0xad, 0x5f, 0x64, 0x57, 0xa9, 0x8a, 0xff, 0x84, 0xa9, 0x58, 0x26, 0xa9, 0x24, 0x82,
	0x57, 0x6c, 0xc1, 0x8b, 0x95, 0x99, 0x17, 0x22, 0xce, 0xd9, 0xf2, 0xa9, 0x71, 0x5e, 0xdc, 0x21,
	0x96, 0xbe, 0xf9, 0x23, 0xc6, 0xa2, 0xe9, 0xf5, 0x95, 0x49, 0xdf, 0x9a, 0x04, 0xc4, 0x2a, 0x29,
	0x15, 0x06, 0x7d, 0x22, 0x95, 0x80, 0x58, 0x0b, 0x3e, 0xf8, 0xcd, 0x0f, 0x19, 0xef, 0x2a, 0x27,
	0xaf, 0x52, 0xb8, 0xb4, 0x52, 0x3b, 0x19, 0x7b, 0x65, 0xb4, 0x58, 0x27, 0x8b, 0x5b, 0x14, 0xfe,
	0x98, 0x6d, 0x9e, 0x81, 0x73, 0x72, 0x04, 0x27, 0x2a, 0xf5, 0x60, 0x05, 0x23, 0xd3, 0x3a, 0xc9,
	0x0f, 0xd8, 0xdd, 0x33, 0x3b, 0xf6, 0xef, 0x33, 0xa9, 0xbd, 0xf2, 0x53, 0xb1, 0xd1, 0x6a, 0xb4,
	0x1b, 0x83, 0x1a, 0xc7, 0x5b, 0x6c, 0x03, 0xf1, 0x70, 0x72, 0x61, 0x55, 0x0c, 0xe2, 0x2e, 0x99,
	0x54, 0x29, 0x8a, 0x65, 0xc7, 0xbe, 0x6b, 0x3e, 0xea, 0x60, 0xb3, 0x49, 0x36, 0x75, 0x12, 0xd7,
	0x39, 0x87, 0x1b, 0xb0, 0x1d, 0x93, 0x8d, 0xfe, 0xf2, 0x62, 0x8b, 0xf6, 0x53, 0xa5, 0x30, 0xc3,
	0x04, 0x23, 0x93, 0x26, 0x62, 0x3b, 0x64, 0xb8, 0x20, 0xf8, 0x33, 0x76, 0x6f, 0xb6, 0xa7, 0x9e,
	0x8e, 0x2d, 0x5c, 0x83, 0xf6, 0x62, 0x87, 0x22, 0x2d, 0x0a, 0x5c, 0xb0, 0xd5, 0xfc, 0xa8, 0xe2,
	0x1e, 0xad, 0x34, 0x83, 0x7c, 0x9f, 0xad, 0x5d, 0xaa, 0x78, 0x1c, 0xa9, 0xcf, 0x20, 0x38, 0xb9,
	0x17, 0x18, 0x63, 0x5c, 0xca, 0x31, 0xf4, 0xd5, 0xdf, 0x99, 0x4a, 0x94, 0x9f, 0x0e, 0xa4, 0x07,
	0x71, 0x3f, 0xc4, 0x58, 0x10, 0x30, 0x7b, 0xa7, 0x20, 0xad, 0xbf, 0x02, 0xe9, 0x3b, 0xd9, 0x54,
	0xec, 0x52, 0xa0, 0x1a, 0x87, 0xb9, 0x29, 0x70, 0x04, 0x69, 0x2a, 0xbe, 0x08, 0xff, 0xa1, 0x46,
	0xf2, 0xa7, 0x6c, 0x27, 0xca, 0xe2, 0x18, 0x9c, 0xfb, 0x90, 0xa5, 0xef, 0x6c, 0x02, 0xd6, 0x89,
	0x3d, 0x0a, 0xbb, 0xc0, 0xa3, 0xed, 0x99, 0x4c, 0xe0, 0xc2, 0x9a, 0x0f, 0xca, 0xe7, 0xb6, 0x5f,
	0x06, 0xdb, 0x79, 0x9e, 0x3f, 0x61, 0x5b, 0xc8, 0xf5, 0x8d, 0x9b, 0x59, 0x0a, 0xb2, 0x9c, 0x63,
	0x71, 0x97, 0x91, 0x37, 0x13, 0x64, 0x2e, 0x8c, 0xd2, 0x5e, 0x3c, 0x08, 0x7f, 0xb0, 0x46, 0xe2,
	0x79, 0x3b, 0xd2, 0xc1, 0xdb, 0xcc, 0x5a, 0xd0, 0xf1, 0x54, 0xec, 0x87, 0xf3, 0x56, 0x39, 0x5c,
	0xe9, 0x7d, 0x66, 0x7c, 0x69, 0xf4, 0x55, 0x38, 0x6f, 0x8d, 0xc4, 0x5a, 0xb8, 0xb4, 0x52, 0xa5,
	0xb4, 0xae, 0x13, 0x0f, 0x43, 0x4d, 0x55, 0x28, 0xfc, 0x13, 0x7d, 0x90, 0xce, 0x87, 0xe3, 0x9c,
	0x49, 0x3b, 0x52, 0x5a, 0x7c, 0x1d, 0xfe, 0xc4, 0x82, 0x40, 0xfb, 0x9f, 0x28, 0xfd, 0x2e, 0xf3,
	0x03, 0x90, 0xce, 0x68, 0xf1, 0x28, 0x44, 0xad, 0x91, 0xbc, 0xcd, 0xb6, 0xa3, 0xcc, 0xe2, 0x35,
	0x49, 0xe0, 0x44, 0xc6, 0xde, 0x58, 0xf1, 0x0d, 0xad, 0x38, 0x4f, 0xe3, 0x6d, 0x3e, 0x35, 0x49,
	0x0a, 0x56, 0xb4, 0xc2, 0x6d, 0x0e, 0x08, 0xab, 0xea, 0x0f, 0x63, 0x92, 0x8e, 0xfa, 0x2c, 0xbe,
	0x25, 0xcf, 0x19, 0xc4, 0x1d, 0x1c, 0xa5, 0xd4, 0x73, 0x3c, 0x60, 0xb3, 0x11, 0x07, 0x21, 0x83,
	0x35, 0x12, 0xad, 0x7a, 0xda, 0x79, 0xa9, 0xf3, 0xed, 0x8b, 0xef, 0x82, 0x55, 0x8d, 0xc4, 0xec,
	0xe4, 0x04, 0xe6, 0x5e, 0x3c, 0x0e, 0xd9, 0xa9, 0x50, 0x94, 0x3f, 0xe3, 0x65, 0x9a, 0xaf, 0xf2,
	0x7d, 0x9e, 0xbf, 0x92, 0xc2, 0xbb, 0x44, 0x90, 0x56, 0x78, 0x42, 0x7a, 0x49, 0xf0, 0x17, 0xec,
	0x3e, 0x5d, 0x4a, 0x3c, 0xb3, 0xd2, 0xa3, 0xc8, 0x4b, 0xeb, 0x21, 0x11, 0x3f, 0xd0, 0x61, 0x6f,
	0x93, 0xb0, 0xff, 0x9c, 0xc3, 0x27, 0xcc, 0xf7, 0x18, 0xb0, 0xb0, 0x43, 0x99, 0xb4, 0x69, 0xe1,
	0x5b, 0x14, 0x8c, 0x50, 0xb2, 0x58, 0xe3, 0xc1, 0xe1, 0x47, 0x72, 0xb8, 0x4d, 0xc2, 0x08, 0x67,
	0x52, 0x69, 0x0a, 0x48, 0x0c, 0x5d, 0x97, 0xa7, 0x21, 0xc2, 0xa2, 0x82, 0xd5, 0x88, 0x7d, 0xa1,
	0xe8, 0x5d, 0x3f, 0x85, 0xde, 0x55, 0xe5, 0xb0, 0xfe, 0x43, 0x6f, 0x29, 0xac, 0x9e, 0x85, 0xfa,
	0xaf, 0xb3, 0x58, 0x6d, 0xf5, 0x08, 0x78, 0x9d, 0x7f, 0x0e, 0xd5, 0xb6, 0x20, 0x50, 0xd7, 0x94,
	0x4a, 0x17, 0x6b, 0x1e, 0xe6, 0x5d, 0xb3, 0xc2, 0xf1, 0xd7, 0x6c, 0x0f, 0x0f, 0x59, 0x3a, 0x9e,
	0xc3, 0x28, 0x34, 0xc7, 0xe7, 0x64, 0xfd, 0x3f, 0xea, 0x2c, 0x6f, 0xa5, 0x12, 0x9c, 0x5e, 0x94,
	0x79, 0x9b, 0x93, 0x70, 0xef, 0xe1, 0x9f, 0x13, 0x97, 0xd7, 0xf5, 0x2f, 0x61, 0xef, 0x0b, 0x02,
	0x66, 0x24, 0xd4, 0x72, 0xb1, 0xfb, 0x97, 0x21, 0x23, 0x75, 0x16, 0xef, 0x4a, 0xee, 0x8c, 0x41,
	0x86, 0x0e, 0x12, 0xf1, 0x8a, 0xaa, 0x63, 0x9e, 0xc6, 0x5a, 0xac, 0x50, 0xe2, 0xd7, 0x50, 0x8b,
	0x15, 0x0a, 0x3b, 0xee, 0x05, 0x68, 0xac, 0xa6, 0x23, 0xf1, 0x5b, 0xab, 0x89, 0x1d, 0x77, 0x86,
	0x2b, 0x5a, 0x47, 0xbc, 0xae, 0x69, 0x9d, 0x83, 0x7f, 0x9a, 0x6c, 0x79, 0xe8, 0xc0, 0x2e, 0x0c,
	0xee, 0x72, 0x44, 0x2f, 0xd5, 0x46, 0xf4, 0x73, 0xb6, 0x72, 0x34, 0xe9, 0x75, 0x9d, 0x68, 0xb6,
	0x9a, 0xed, 0x8d, 0x97, 0x0f, 0x0e, 0x8b, 0x67, 0x01, 0x2e, 0x73, 0x48, 0xda, 0xb1, 0xf6, 0x76,
	0x3a, 0x08, 0x76, 0x18, 0x1d, 0x15, 0x2d, 0xaf, 0x21, 0x1f, 0xe9, 0x05, 0xa6, 0x9d, 0x49, 0xe7,
	0x3e, 0x1a, 0x9b, 0xe4, 0x33, 0xbd, 0xc0, 0x78, 0xbb, 0x4e, 0x94, 0x75, 0x9e, 0x1c, 0xc3, 0x68,
	0x2f, 0x09, 0xf4, 0xec, 0xcb, 0x5c, 0x0c, 0xd3, 0xbd, 0xc0, 0xf8, 0xe6, 0x38, 0xbe, 0x96, 0x2a,
	0xcd, 0x87, 0x7b, 0x00, 0xe8, 0xd1, 0xbb, 0x96, 0x23, 0x18, 0x0e, 0xfa, 0xf9, 0x4c, 0x2f, 0x30,
	0x7a, 0x5c, 0x9a, 0x31, 0xe8, 0x7c, 0x82, 0x07, 0xc0, 0x77, 0x58, 0x73, 0x68, 0x53, 0x1a, 0xd8,
	0xeb, 0x03, 0xfc, 0xc4, 0xa4, 0x1c, 0x7f, 0x9a, 0x28, 0x3b, 0xa5, 0x11, 0xdd, 0x1c, 0xe4, 0xa8,
	0x78, 0x81, 0x6c, 0x56, 0x5e, 0x20, 0xbb, 0x6c, 0xa5, 0x0f, 0x37, 0x90, 0xe6, 0x53, 0x38, 0x80,
	0xfd, 0x37, 0x8c, 0x95, 0x29, 0xc2, 0x08, 0x63, 0x98, 0x52, 0xd6, 0xd7, 0x07, 0xf8, 0x89, 0x5e,
	0x37, 0x32, 0xcd, 0x60, 0xf6, 0x5e, 0x22, 0xf0, 0xfb, 0xd2, 0x9b, 0xc6, 0xd5, 0x1d, 0x7a, 0x76,
	0xbd, 0xfa, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x32, 0x5e, 0xf8, 0xaa, 0x88, 0x09, 0x00, 0x00,
}
